"""
This module provides functionality to generate a python module with definition
of settings classes. The generated settings.py file will be placed in
../ansys/fluent/solver directory.

This requires Fluent to be installed.

Usage
-----
python <path to settingsgen.py>
"""
import hashlib
import io
import os
import pickle
import pprint
from typing import IO
from ansys.fluent.solver import flobject

def _gethash(obj_info):
    dhash = hashlib.sha256()
    dhash.update(pickle.dumps(obj_info))
    return dhash.hexdigest()

def _getIndentStr(indent):
    return f"{' '*indent*4}"

def _write_cls_helper(out, cls, indent = 0):
    try:
        iStr = _getIndentStr(indent)
        iStr1 = _getIndentStr(indent+1)
        iStr2 = _getIndentStr(indent+2)
        out.write('\n')
        out.write(f'{iStr}class {cls.__name__}'
                   f'({", ".join(c.__name__ for c in cls.__bases__)}):\n')

        doc = ('\n' + iStr1).join(cls.__doc__.split('\n'))
        out.write(f'{iStr1}"""\n')
        out.write(f'{iStr1}{doc}')
        out.write(f'\n{iStr1}"""\n')
        out.write(f'{iStr1}scheme_name = "{cls.scheme_name}"\n')

        member_names = getattr(cls, 'member_names', None)
        if member_names:
            out.write(f'{iStr1}member_names = \\\n')
            strout = io.StringIO()
            pprint.pprint(member_names, stream=strout, compact=True,
                    width=80-indent*4-10)
            mn = ('\n' + iStr2).join(strout.getvalue().strip().split('\n'))
            out.write(f'{iStr2}{mn}\n')
            for member in member_names:
                _write_cls_helper(out, getattr(cls, member), indent+1)

        command_names = getattr(cls, 'command_names', None)
        if command_names:
            out.write(f'{iStr1}command_names = \\\n')
            strout = io.StringIO()
            pprint.pprint(command_names, stream=strout, compact=True,
                    width=80-indent*4-10)
            mn = ('\n' + iStr2).join(strout.getvalue().strip().split('\n'))
            out.write(f'{iStr2}{mn}\n')
            for command in command_names:
                _write_cls_helper(out, getattr(cls, command), indent+1)

        arguments = getattr(cls, 'argument_names', None)
        if arguments:
            out.write(f'{iStr1}argument_names = \\\n')
            strout = io.StringIO()
            pprint.pprint(arguments, stream=strout, compact=True,
                    width=80-indent*4-10)
            mn = ('\n' + iStr2).join(strout.getvalue().strip().split('\n'))
            out.write(f'{iStr2}{mn}\n')
            for argument in arguments:
                _write_cls_helper(out, getattr(cls, argument), indent+1)
        child_object_type = getattr(cls, 'child_object_type', None)
        if child_object_type:
            _write_cls_helper(out, child_object_type, indent+1)
    except Exception:
        raise

def write_settings_classes(out: IO, cls, obj_info):
    """
    Write the settings classes in 'out' stream

    Parameters
    ----------
    out:     Stream
    flproxy: Proxy
             Object that interfaces with the Fluent backend
    """
    hash = _gethash(obj_info)
    out.write("###\n")
    out.write("### THIS FILE IS AUTOGENERATED! DO NOT MODIFY!\n\n")
    out.write("###\n")
    out.write('from ansys.fluent.solver.flobject import *\n\n')
    out.write(f'SHASH = "{hash}"\n')
    _write_cls_helper(out, cls)

if __name__ == '__main__':
    from ansys.fluent.launcher.launcher import launch_fluent

    dirname = os.path.dirname(__file__)
    filepath = os.path.normpath(
            os.path.join(dirname, "..", "ansys", "fluent",
                "solver", "settings.py")
            )
    session = launch_fluent()
    sinfo = session.get_settings_service().get_static_info()
    cls = flobject.get_cls('', sinfo);
    with open(filepath, 'w') as f:
        write_settings_classes(f, cls, sinfo)
