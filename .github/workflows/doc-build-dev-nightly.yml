name: Doc Build Dev Nightly

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

env:
  DOCUMENTATION_CNAME: 'fluent.docs.pyansys.com'
  DOC_DEPLOYMENT_IMAGE_TAG: v25.2.0
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  PYFLUENT_TIMEOUT_FORCE_EXIT: 30
  PYFLUENT_LAUNCH_CONTAINER: 1
  PYFLUENT_LOGGING: 'DEBUG'
  PYFLUENT_WATCHDOG_DEBUG: 'OFF'
  PYFLUENT_HIDE_LOG_SECRETS: 1
  PYFLUENT_SKIP_API_UPGRADE_ADVICE: 1
  PYFLUENT_CONTAINER_MOUNT_SOURCE: "/home/ansys/Downloads/ansys_fluent_core_examples"

jobs:
  build_dev_docs:
    runs-on: [self-hosted, pyfluent]
    env:
      FLUENT_IMAGE_TAG: ${{ env.DOC_DEPLOYMENT_IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install OS packages
        run: bash scripts/install_os_packages.sh

      - name: Install pyfluent and reapply after codegen
        run: |
          make install
          make api-codegen
          rm -rf dist
          make install > /dev/null

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ansys-bot
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Fluent docker image
        run: make docker-pull

      - name: Run example scripts
        run: python examples/00-fluent/${{ matrix.script }}
        strategy:
          matrix:
            script:
              - exhaust_system_settings_api.py
              - external_compressible_flow.py
              - mixing_elbow_settings_api.py
              - modeling_cavitation.py
              - species_transport.py

      - name: Build All Documentation
        run: |
          pip install -r requirements/requirements_build.txt
          pip install ansys-fluent-core[docs,reader,tests]
          make build-all-docs
        env:
          BUILD_ALL_DOCS: 1

      - name: Zip HTML Documentation before upload
        run: |
          pushd doc/_build/html
          zip -r ../../../HTML-Documentation-tag-${{ env.DOC_DEPLOYMENT_IMAGE_TAG }}.zip .
          popd

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v4
        with:
          name: HTML-Documentation-tag-${{ env.DOC_DEPLOYMENT_IMAGE_TAG }}
          path: HTML-Documentation-tag-${{ env.DOC_DEPLOYMENT_IMAGE_TAG }}.zip
          retention-days: 7

  deploy_dev_docs:
    runs-on: ubuntu-latest
    needs: [build_dev_docs]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: "Deploy development documentation"
        uses: ansys/actions/doc-deploy-dev@v8
        with:
          doc-artifact-name: 'HTML-Documentation-tag-${{ env.DOC_DEPLOYMENT_IMAGE_TAG }}'
          decompress-artifact: true
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
 