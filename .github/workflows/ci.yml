
name: GitHub Actions

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main
      - release/*

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_EXAMPLES_CACHE: 5
  API_CODE_CACHE: 2

jobs:
  stylecheck:
    name: Style Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install pre-commit
        run: |
          python -m pip install pre-commit

      - name: Run pre-commit
        if: always()
        run: |
          pre-commit run --all-files --show-diff-on-failure

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Running Vale
        uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          files: doc
          reporter: github-pr-check
          level: error
          filter_mode: nofilter
          fail_on_error: true
          vale_flags: "--config=doc/.vale.ini"

  test-import:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Windows pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install pyfluent
        run: make install

      - name: Test import
        run: make test-import

  docs_build:
    name: Build Documentation
    needs: [docs-style]
    runs-on: [self-hosted, pyfluent]
    strategy:
      matrix:
        image-tag: [v22.2.0]

    steps:
      - uses: actions/checkout@v3

      # used for documentation deployment
      - name: Get Bot Application Token
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && matrix.image-tag == 'v22.2.0'
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install OS packages
        run: |
          sudo apt-get update
          sudo apt-get install pandoc libegl1 make xvfb libfontconfig1 libxrender1 libxkbcommon-x11-0 -y

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_doc.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install pyfluent
        run: make install

      - name: Retrieve PyFluent version
        run: |
          echo "::set-output name=PYFLUENT_VERSION::$(python -c "from ansys.fluent.core import __version__; print(__version__)")"
          echo "PYFLUENT version is: $(python -c "from ansys.fluent.core import __version__; print(__version__)")"
        id: version

      - name: Cache API Code
        uses: actions/cache@v3
        id: cache-api-code
        with:
          path: |
            src/ansys/fluent/core/datamodel
            src/ansys/fluent/core/fluent_version.py
            src/ansys/fluent/core/meshing/tui.py
            src/ansys/fluent/core/solver/settings
            src/ansys/fluent/core/solver/tui.py
            doc/source/api/core/meshing/tui
            doc/source/api/core/meshing/datamodel
            doc/source/api/core/solver/tui
            doc/source/api/core/solver/datamodel
          key: API-Code-v${{ env.API_CODE_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}-${{ hashFiles('codegen/**') }}
          restore-keys: API-Code-v${{ env.API_CODE_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}

      - name: Login to GitHub Container Registry
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.REPO_DOWNLOAD_PAT }}

      - name: Pull Fluent docker image
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        run: make docker-pull
        env:
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Run API codegen
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        run: make api-codegen
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          PYFLUENT_START_INSTANCE: 0
          PYFLUENT_LAUNCH_CONTAINER: 1
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Install again after codegen
        run: |
          rm -rf dist
          make install > /dev/null

      - name: Cache examples
        uses: actions/cache@v3
        with:
          path: doc/source/examples
          key: Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}-${{ hashFiles('examples/**') }}
          restore-keys: |
            Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}

      - name: Build Documentation
        run: make build-doc DOCS_CNAME=fluent.docs.pyansys.com
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          PYFLUENT_START_INSTANCE: 0
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Upload HTML Documentation
        if: matrix.image-tag == 'v22.2.0'
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Documentation-tag-${{ matrix.image-tag }}
          path: doc/_build/html
          retention-days: 7

      - name: Deploy
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && matrix.image-tag == 'v22.2.0'
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          repository-name: pyansys/pyfluent-docs
          token: ${{ secrets.DOC_DEPLOYMENT_PAT }}
          BRANCH: gh-pages
          FOLDER: doc/_build/html
          CLEAN: true

  test:
    name: Unit Testing
    needs: test-import
    runs-on: [self-hosted, pyfluent]
    strategy:
      fail-fast: false
      matrix:
        image-tag: [v22.2.0, v23.1.0]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Add version information
        run: make version-info

      - name: Install pyfluent
        run: make install

      - name: Retrieve PyFluent version
        run: |
          echo "::set-output name=PYFLUENT_VERSION::$(python -c "from ansys.fluent.core import __version__; print(__version__)")"
          echo "PYFLUENT version is: $(python -c "from ansys.fluent.core import __version__; print(__version__)")"
        id: version

      - name: Cache API Code
        uses: actions/cache@v3
        id: cache-api-code
        with:
          path:
            src/ansys/fluent/core/datamodel
            src/ansys/fluent/core/fluent_version.py
            src/ansys/fluent/core/meshing/tui.py
            src/ansys/fluent/core/solver/settings
            src/ansys/fluent/core/solver/tui.py
            doc/source/api/core/meshing/tui
            doc/source/api/core/meshing/datamodel
            doc/source/api/core/solver/tui
            doc/source/api/core/solver/datamodel
          key: API-Code-v${{ env.API_CODE_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}-${{ hashFiles('codegen/**') }}
          restore-keys: API-Code-v${{ env.API_CODE_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}

      - name: Login to GitHub Container Registry
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.REPO_DOWNLOAD_PAT }}

      - name: Pull Fluent docker image
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        run: make docker-pull
        env:
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Run API codegen
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        run: make api-codegen
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          PYFLUENT_START_INSTANCE: 0
          PYFLUENT_LAUNCH_CONTAINER: 1
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Install again after codegen
        run: |
          rm -rf dist
          make install > /dev/null

      - name: Unit Testing
        run: make unittest
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          PYFLUENT_START_INSTANCE: 0
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Upload Coverage Results
        if: matrix.image-tag == 'v22.2.0'
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Coverage-tag-${{ matrix.image-tag }}
          path: cov_html
          retention-days: 7

      - name: Check package
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
        run: |
          pip install twine
          twine check dist/*

      - name: Upload package
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: PyFluent-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
          retention-days: 7

  build:
    name: Build for release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: test-import
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image-tag: [v22.2.0]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Add version information
        run: make version-info

      - name: Install pyfluent
        run: make install

      - name: Retrieve PyFluent version
        run: |
          echo "::set-output name=PYFLUENT_VERSION::$(python -c "from ansys.fluent.core import __version__; print(__version__)")"
          echo "PYFLUENT version is: $(python -c "from ansys.fluent.core import __version__; print(__version__)")"
        id: version

      - name: Cache API Code
        uses: actions/cache@v3
        id: cache-api-code
        with:
          path:
            src/ansys/fluent/core/datamodel
            src/ansys/fluent/core/fluent_version.py
            src/ansys/fluent/core/meshing/tui.py
            src/ansys/fluent/core/solver/settings
            src/ansys/fluent/core/solver/tui.py
            doc/source/api/core/meshing/tui
            doc/source/api/core/meshing/datamodel
            doc/source/api/core/solver/tui
            doc/source/api/core/solver/datamodel
          key: API-Code-v${{ env.API_CODE_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}-${{ hashFiles('codegen/**') }}
          restore-keys: API-Code-v${{ env.API_CODE_CACHE }}-${{ steps.version.outputs.PYFLUENT_VERSION }}-${{ matrix.image-tag }}

      - name: Login to GitHub Container Registry
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.REPO_DOWNLOAD_PAT }}

      - name: Pull Fluent docker image
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        run: make docker-pull
        env:
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Run API codegen
        if: steps.cache-api-code.outputs.cache-hit != 'true'
        run: make api-codegen
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          PYFLUENT_START_INSTANCE: 0
          PYFLUENT_LAUNCH_CONTAINER: 1
          FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}

      - name: Install again after codegen
        run: |
          rm -rf dist
          make install > /dev/null

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: PyFluent-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
          retention-days: 7

  release:
    name: Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v3

      - name: Display package file list
        run: ls -R

      - name: Upload to Private PyPi
        run: |
          pip install twine
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: PAT
          TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
          TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.ANSYS_FLUENT_CORE_PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
