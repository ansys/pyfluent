.. _ref_field_data:

Field data
==========
Field data is an attribute of a session and thus an object. With PyFluent, you
can access Fluent surface, scalar, and vector field data.

Multiple fields in a request
----------------------------
You can get data for multiple fields in a single request and see
the data for all of these fields in a single response.

**Request**

The ``add_get_<items>_request`` methods combine requests for multiple fields in a single request: 

- ``add_get_surfaces_request`` adds a surfaces request.
- ``add_get_scalar_fields_request`` adds a scalar fields request.
- ``add_get_vector_fields_request`` adds a vector fields request. 
    
**Response**
The ``get_fields`` method returns all requested fields in a single response. It provides 
a dictionary containing the requested fields as a numpy array in the following order:

``tag_id [int]-> surface_id [int] -> field_name [str] -> field_data[np.array]``

  
Tag ID
------ 
A tag ID is generated by applying ```bitwise or``` on all tags for a request. Here is a list
of supported tags and their values:   
 
*  OVERSET_MESH: 1,
*  ELEMENT_LOCATION: 2,
*  NODE_LOCATION: 4,
*  BOUNDARY_VALUES: 8,

For example, if you request the scalar field data for element location[2], in the
dictionary,  ``tag_id`` is ``2``. Similarly, if you request the boundary values[8] for 
node location[4], ``tag_id`` is ``(4|8)``, or 12.

Surface ID
----------
The surface ID is the same one that is passed in the request.

Field name
----------
A request returns multiple fields. The number of fields depends on the request type.

Surface request 
~~~~~~~~~~~~~~~
The response to a surface request contains any of the following fields, depending on the
request arguments:

- ``faces``, which contain face connectivity    
- ``vertices``, which contain node coordinates
- ``centroid``, which contains face centroids    
- ``face-normal``, which contains face normals


Scalar field request
~~~~~~~~~~~~~~~~~~~~
The response to a scalar field request contains a single field with the same name as the
scalar field name passed in the request.

Vector field request
~~~~~~~~~~~~~~~~~~~~
The response to a vector field request contains two fields:

- ``vector field``, with the same name as the vector field name that is passed in the request 
- ``vector-scale``, a float value indicating the vector scale.
 

Example
~~~~~~~

.. code-block:: python

    #Get field data 
    field_data = session.field_data

    #Add requests
        
    #Data for surfaces for following requests will be returned in tag_id 0. As there is no tag.
    
    field_data.add_get_surfaces_request(surface_ids=[1], provide_vertices=True, 
                                        provide_faces=False, provide_faces_centroid=True
                                       )
                                       
    field_data.add_get_surfaces_request(surface_ids=[2], provide_vertices=True, 
                                       provide_faces=True                                        
                                       )                                       
    
    #Data for tempaeraure for following request will be returned in tag_id 12 i.e. 4|8.
    field_data.add_get_scalar_fields_request(surface_ids=[1,2], field_name="temperature", 
                                            node_value=True, boundary_value=True
                                            )
    
    #Data for tempaeraure for following request will be returned in tag_id 4.
    field_data.add_get_scalar_fields_request(surface_ids=[3], field_name="temperature", 
                                             node_value=True, boundary_value=False
                                             )
    
    #Data for pressure for following request will be returned in tag_id 2. 
    field_data.add_get_scalar_fields_request(surface_ids=[1,4], field_name="pressure",
                                            node_value=False, boundary_value=False
                                            )
    
    #Get fields
    
    payload_data = field_data.get_fields()
    
    
    #Data will be returned in dictionary with order 
    #`tag_id [int]-> surface_id [int] -> field_name [str] -> field_data [np.array]`
    {
      0:{
         1:{
           "vertices": np.array #for vertices.
           "centroid": np.array #for faces centroid.
           },
         2:{
           "vertices": np.array #for vertices.
           "faces": np.array #for faces connectivity.
           },           
        },    
      12:{
         1:{
           "temperature": np.array #for temperature at node location with boundary values.
           },
         2:{
           "temperature": np.array #for temperature at node location with boundary values.
           },           
        }, 
      4:{
         3:{
           "temperature": np.array #for temperature at node location.
           }         
        },       
      2:{
         1:{
           "pressure": np.array #for pressure at element location.
           },
         4:{
           "pressure": np.array #for pressure at element location.
           },           
        },           
    }

One field per request
---------------------
You can receive one field for each request. There is a separate method for each type of field (surface, scalar, 
or vector):

- ``get_surface_data`` gets surface data.
- ``get_scalar_field_data`` gets scalar field data.
- ``get_vector_field_data`` gets vector field data.
        
For a surface or scalar field request, the response contains a dictionary of surface IDs and a numpy array of 
the requested field. 

``surface_id [int] -> field[np.array]``
  
For a vector field request, the response is a dictionary of surface IDs and a tuple of a numpy array of ``vector field`` 
and ``vector-scale``. 

``surface_id [int] -> (vector field [np.array],  vector-scale [float])``

.. note:: 
   In Fluent, you can associate a surface name with multiple surface IDs.
   Thus, a response can contain a surface ID as a key of the returned dictionary. 
  
Example
~~~~~~~

.. code-block:: python

    from ansys.fluent.core.services.field_data import SurfaceDataType

    #Get field data object
    field_data = session.field_data
    
    #wall surface is associated with two IDs i.e. id1 and id2
    
    #Get surface data 
    vertices = field_data.get_surface_data("wall", SurfaceDataType.Vertices)
    #return value>> {id1: np.array, id2: np.array}
    normals = field_data.get_surface_data("wall", SurfaceDataType.FacesNormal)
    #return value>> {id1: np.array, id2: np.array}
    
    #Get scalar field data 
    scalar_field_data = field_data.get_scalar_field_data("wall", "temperature")
    #return value>> {id1: np.array, id2: np.array}
    
    #Get vector field data 
    vector_field_data = field_data.get_vector_field_data("wall", "velocity")
    #return value>> {id1: (np.array, float), id2: (np.array, float)}

    
.. currentmodule:: ansys.fluent.core.services

.. autosummary::
   :toctree: _autosummary


.. automethod:: ansys.fluent.core.services.field_data.FieldData.add_get_surfaces_request
.. automethod:: ansys.fluent.core.services.field_data.FieldData.add_get_scalar_fields_request
.. automethod:: ansys.fluent.core.services.field_data.FieldData.add_get_vector_fields_request
.. automethod:: ansys.fluent.core.services.field_data.FieldData.get_fields

.. automethod:: ansys.fluent.core.services.field_data.FieldData.get_surface_data
.. automethod:: ansys.fluent.core.services.field_data.FieldData.get_scalar_field_data
.. automethod:: ansys.fluent.core.services.field_data.FieldData.get_vector_field_data
    