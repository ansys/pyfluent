
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/mixing_elbow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-fluent_mixing_elbow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_mixing_elbow.py:

.. _ref_mixing_elbow_tui_api:

Watertight geometry meshing workflow
------------------------------------
This example sets up and solves a three-dimensional turbulent fluid flow
and heat transfer problem in a mixing elbow, which is common in piping
systems in power plants and process industries. Predicting the flow field
and temperature field in the area of the mixing region is important to
designing the junction properly.

This example uses the guided workflow for watertight geometry meshing
because it is appropriate for geometries that can have no imperfections,
such as gaps and leakages.

**Workflow tasks**

The watertight geometry meshing workflow guides you through these tasks:

- Import a CAD geometry
- Generate a surface mesh
- Describe the geometry
- Generate a volume mesh

**Problem description**

A cold fluid at 20 deg C flows into the pipe through a large inlet. It then mixes
with a warmer fluid at 40 deg C that enters through a smaller inlet located at
the elbow. The pipe dimensions are in inches, and the fluid properties and
boundary conditions are given in SI units. Because the Reynolds number for the
flow at the larger inlet is ``50, 800``, a turbulent flow model is required.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/mixing_elbow.png'








.. GENERATED FROM PYTHON SOURCE LINES 36-45

Example Setup
-------------
Before you can use the watertight geometry meshing workflow, you must set up the
example and initialize this workflow.

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports, which includes downloading and importing
the geometry file.

.. GENERATED FROM PYTHON SOURCE LINES 45-51

.. code-block:: default


    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples

    import_filename = examples.download_file("mixing_elbow.pmdb", "pyfluent/mixing_elbow")








.. GENERATED FROM PYTHON SOURCE LINES 52-56

Launch Fluent
~~~~~~~~~~~~~
Launch Fluent as a service in meshing mode with double precision running on
two processors.

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: default


    meshing = pyfluent.launch_fluent(precision="double", processor_count=2, mode="meshing")









.. GENERATED FROM PYTHON SOURCE LINES 61-64

Initialize workflow
~~~~~~~~~~~~~~~~~~~
Initialize the watertight geometry meshing workflow.

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default


    meshing.workflow.InitializeWorkflow(WorkflowType="Watertight Geometry")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 69-77

Watertight geometry meshing workflow
------------------------------------
The fault-tolerant meshing workflow guides you through the several tasks that
follow.

Import CAD and set length units
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the CAD geometry and set the length units to inches.

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: default


    meshing.workflow.TaskObject["Import Geometry"].Arguments = {
        "FileName": import_filename,
        "LengthUnit": "in",
    }

    # Import geometry
    # ~~~~~~~~~~~~~~~
    # Import the geometry.

    meshing.workflow.TaskObject["Import Geometry"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 90-94

Add local sizing
~~~~~~~~~~~~~~~~
Add local sizing. This task asks whether you want to add local sizing controls
to the faceted geometry. You can keep the default settings and execute the task.

.. GENERATED FROM PYTHON SOURCE LINES 94-98

.. code-block:: default


    meshing.workflow.TaskObject["Add Local Sizing"].AddChildToTask()
    meshing.workflow.TaskObject["Add Local Sizing"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 99-103

Generate surface mesh
~~~~~~~~~~~~~~~~~~~~~
Generate the surface mash. In this task, you can set various properties of the
surface mesh for the faceted geometry. For ``"MaxSize"``, set ``0.3``.

.. GENERATED FROM PYTHON SOURCE LINES 103-109

.. code-block:: default


    meshing.workflow.TaskObject["Generate the Surface Mesh"].Arguments = {
        "CFDSurfaceMeshControls": {"MaxSize": 0.3}
    }
    meshing.workflow.TaskObject["Generate the Surface Mesh"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 110-115

Describe geometry
~~~~~~~~~~~~~~~~~
Describe the geometry. In this task, you are prompted with questions
relating to the nature of the imported geometry, which defines
the fluid region. The geometry consists of only fluid regions.

.. GENERATED FROM PYTHON SOURCE LINES 115-125

.. code-block:: default


    meshing.workflow.TaskObject["Describe Geometry"].UpdateChildTasks(
        SetupTypeChanged=False
    )
    meshing.workflow.TaskObject["Describe Geometry"].Arguments = {
        "SetupType": "The geometry consists of only fluid regions with no voids"
    }
    meshing.workflow.TaskObject["Describe Geometry"].UpdateChildTasks(SetupTypeChanged=True)
    meshing.workflow.TaskObject["Describe Geometry"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 126-130

Update boundaries
~~~~~~~~~~~~~~~~~
Update the boundaries. Set ``"BoundaryLabelTypeList"`` to ``"wall"`` and
update the boundaries.

.. GENERATED FROM PYTHON SOURCE LINES 130-139

.. code-block:: default


    meshing.workflow.TaskObject["Update Boundaries"].Arguments = {
        "BoundaryLabelList": ["wall-inlet"],
        "BoundaryLabelTypeList": ["wall"],
        "OldBoundaryLabelList": ["wall-inlet"],
        "OldBoundaryLabelTypeList": ["velocity-inlet"],
    }
    meshing.workflow.TaskObject["Update Boundaries"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 140-145

Update regions
~~~~~~~~~~~~~~
Update the regions. In this task, you can review the names and types of
the various regions that have been generated from your imported geometry and
change them as needed. You can keep the default settings.

.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: default


    meshing.workflow.TaskObject["Update Regions"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 149-153

Add boundary layers
~~~~~~~~~~~~~~~~~~~
Add boundary layers, which consist of setting properties for the
boundary layer mesh. You can keep the default settings.

.. GENERATED FROM PYTHON SOURCE LINES 153-162

.. code-block:: default


    meshing.workflow.TaskObject["Add Boundary Layers"].AddChildToTask()
    meshing.workflow.TaskObject["Add Boundary Layers"].InsertCompoundChildTask()
    meshing.workflow.TaskObject["smooth-transition_1"].Arguments = {
        "BLControlName": "smooth-transition_1",
    }
    meshing.workflow.TaskObject["Add Boundary Layers"].Arguments = {}
    meshing.workflow.TaskObject["smooth-transition_1"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 163-167

Generate volume mesh
~~~~~~~~~~~~~~~~~~~~
Generate the volume mesh, which consists of setting properties for the
volume mesh. Set ``"VolumeFill"`` to ``"poly-hexcore"``.

.. GENERATED FROM PYTHON SOURCE LINES 167-176

.. code-block:: default


    meshing.workflow.TaskObject["Generate the Volume Mesh"].Arguments = {
        "VolumeFill": "poly-hexcore",
        "VolumeFillControls": {
            "HexMaxCellLength": 0.3,
        },
    }
    meshing.workflow.TaskObject["Generate the Volume Mesh"].Execute()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 177-180

.. image:: /_static/mixing_elbow_011.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 182-185

Check mesh in meshing mode
~~~~~~~~~~~~~~~~~~~~~~~~~~
Check the mesh in meshing mode

.. GENERATED FROM PYTHON SOURCE LINES 185-188

.. code-block:: default


    meshing.tui.mesh.check_mesh()








.. GENERATED FROM PYTHON SOURCE LINES 189-192

Save mesh file
~~~~~~~~~~~~~~
Save the mesh file (``mixing_elbow.msh.h5``).

.. GENERATED FROM PYTHON SOURCE LINES 192-195

.. code-block:: default


    meshing.tui.file.write_mesh("mixing_elbow.msh.h5")








.. GENERATED FROM PYTHON SOURCE LINES 196-207

Solve and postprocess
---------------------
Once you have completed the watertight geometry meshing workflow, you can
solve and postprcess the results.

Switch to solution mode
~~~~~~~~~~~~~~~~~~~~~~~
Switch to solution mode. Now that a high-quality mesh has been generated
using Fluent in meshing mode, you can switch to solver mode to complete the
setup of the simulation. Because you have just checked the mesh, set ``"yes"``
to switch to the solution mode.

.. GENERATED FROM PYTHON SOURCE LINES 207-210

.. code-block:: default


    solver = meshing.switch_to_solver()








.. GENERATED FROM PYTHON SOURCE LINES 211-218

Check mesh in solver mode
~~~~~~~~~~~~~~~~~~~~~~~~~
Check the mesh in solver mode. The mesh check lists the minimum and maximum
x, y, and z values from the mesh in the default SI units of meters. It also
reports a number of other mesh features that are checked. Any errors in the
mesh are reported. Ensure that the minimum volume is not negative because
Fluent cannot begin a calculation when this is the case.

.. GENERATED FROM PYTHON SOURCE LINES 218-221

.. code-block:: default


    solver.tui.mesh.check()








.. GENERATED FROM PYTHON SOURCE LINES 222-228

Set working units for mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~
Set the working units for the mesh to inches. Because the default SI units are
used for everything except length, you do not have to change any other units
in this example. If you want working units for length to be other than inches
(for example, millimeters), make the appropriate change.

.. GENERATED FROM PYTHON SOURCE LINES 228-231

.. code-block:: default


    solver.tui.define.units("length", "in")








.. GENERATED FROM PYTHON SOURCE LINES 232-235

Enable heat transfer
~~~~~~~~~~~~~~~~~~~~
Enable heat transfer by activating the energy equation.

.. GENERATED FROM PYTHON SOURCE LINES 235-238

.. code-block:: default


    solver.tui.define.models.energy("yes", ", ", ", ", ", ", ", ")








.. GENERATED FROM PYTHON SOURCE LINES 239-242

Create material
~~~~~~~~~~~~~~~
Create a material named ``"water-liquid"``.

.. GENERATED FROM PYTHON SOURCE LINES 242-245

.. code-block:: default


    solver.tui.define.materials.copy("fluid", "water-liquid")








.. GENERATED FROM PYTHON SOURCE LINES 246-250

Set up cell zone conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Set up the cell zone conditions for the fluid zone (``elbow-fluid``)``. Set the
material to ``"water-liquid"``.

.. GENERATED FROM PYTHON SOURCE LINES 250-277

.. code-block:: default


    solver.tui.define.boundary_conditions.fluid(
        "elbow-fluid",
        "yes",
        "water-liquid",
        "no",
        "no",
        "no",
        "no",
        "0",
        "no",
        "0",
        "no",
        "0",
        "no",
        "0",
        "no",
        "0",
        "no",
        "1",
        "no",
        "no",
        "no",
        "no",
        "no",
    )








.. GENERATED FROM PYTHON SOURCE LINES 278-282

Set up boundary conditions for CFD analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Set up the boundary conditions for the inlets, outlet, and walls for CFD
analysis.

.. GENERATED FROM PYTHON SOURCE LINES 282-332

.. code-block:: default


    # cold inlet (cold-inlet), Setting: Value:
    # Velocity Specification Method: Magnitude, Normal to Boundary

    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "vmag", "no", 0.4, "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "ke-spec", "no", "no", "no", "yes", "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "turb-intensity", 5, "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "turb-hydraulic-diam", 4, "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "temperature", "no", 293.15, "quit"
    )

    # hot inlet (hot-inlet), Setting: Value:
    # Velocity Specification Method: Magnitude, Normal to Boundary

    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "vmag", "no", 1.2, "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "ke-spec", "no", "no", "no", "yes", "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "turb-intensity", 5, "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "turb-hydraulic-diam", 1, "quit"
    )
    solver.tui.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "temperature", "no", 313.15, "quit"
    )

    # pressure outlet (outlet), Setting: Value:
    # Backflow Turbulent Intensity: 5 [%]
    # Backflow Turbulent Viscosity Ratio: 4

    solver.tui.define.boundary_conditions.set.pressure_outlet(
        "outlet", [], "turb-intensity", 5, "quit"
    )
    solver.tui.define.boundary_conditions.set.pressure_outlet(
        "outlet", [], "turb-viscosity-ratio", 4, "quit"
    )








.. GENERATED FROM PYTHON SOURCE LINES 333-336

Enable plotting of residuals during calculation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Enable plotting of residuals during the calculation.

.. GENERATED FROM PYTHON SOURCE LINES 336-339

.. code-block:: default


    solver.tui.solve.monitors.residual.plot("yes")








.. GENERATED FROM PYTHON SOURCE LINES 340-344

Create surface report definition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a surface report definition of the average temperature at the outlet
named ``"outlet-temp-avg"``.

.. GENERATED FROM PYTHON SOURCE LINES 344-356

.. code-block:: default


    solver.tui.solve.report_definitions.add(
        "outlet-temp-avg",
        "surface-massavg",
        "field",
        "temperature",
        "surface-names",
        "outlet",
        "()",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 357-362

Create expression report definition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a report definition of single value expression type computing the difference
of area-averaged static pressure over cold-inlet and oulet. The name of the
report definition is ``"ave-pressure-diff"``.

.. GENERATED FROM PYTHON SOURCE LINES 362-371

.. code-block:: default


    solver.tui.solve.report_definitions.add(
        "ave-pressure-diff",
        "single-val-expression",
        "define",
        "\"AreaAve(StaticPressure, ['cold-inlet'])-AreaAve(StaticPressure, ['outlet'])\"",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 372-375

Create convergence condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a convergence condition for ``outlet-temp-avg``.

.. GENERATED FROM PYTHON SOURCE LINES 375-416

.. code-block:: default


    # - Set ``"add"`` to ``"con-outlet-temp-avg"``.
    # - Set ``"report-defs"`` to ``"outlet-temp-avg"``.
    # - Set ``"stop-criterion"`` to ``"1e-04"``.
    # - Set ``"initial-values-to-ignore"`` to ``"20"``.
    # - Set ``"previous-values-to-consider"`` to ``"15"``.
    # - Set ``"print?"``to ``"yes"``.
    # - Set ``"frequency"`` to ``"3"``.
    #
    # These settings cause Fluent to consider the solution converged when the
    # surface report definition value for each of the previous 15 iterations is
    # within 0.001% of the current value. Convergence of the values is checked
    # every 3 iterations. The first 20 iterations are ignored, allowing for any
    # initial solution dynamics to settle out. Note that the value printed to the
    # console is the deviation between the current and previous iteration values
    # only.

    solver.tui.solve.convergence_conditions(
        "conv-reports",
        "add",
        "con-outlet-temp-avg",
        "initial-values-to-ignore",
        "20",
        "previous-values-to-consider",
        "15",
        "print?",
        "yes",
        "report-defs",
        "outlet-temp-avg",
        "stop-criterion",
        "1e-04",
        "quit",
        "quit",
        "condition",
        "1",
        "frequency",
        "3",
        "quit",
    )
    solver.tui.solve.convergence_conditions("frequency", "3", "quit")








.. GENERATED FROM PYTHON SOURCE LINES 417-420

Initialize flow field
~~~~~~~~~~~~~~~~~~~~~
Initialize the flow field using hybrid initialization.

.. GENERATED FROM PYTHON SOURCE LINES 420-423

.. code-block:: default


    solver.tui.solve.initialize.hyb_initialization()








.. GENERATED FROM PYTHON SOURCE LINES 424-427

Save case file
~~~~~~~~~~~~~~
Solve the case file (``mixing_elbow1.cas.h5``).

.. GENERATED FROM PYTHON SOURCE LINES 427-430

.. code-block:: default


    solver.tui.file.write_case("mixing_elbow1.cas.h5")








.. GENERATED FROM PYTHON SOURCE LINES 431-434

Solve for 100 iterations
~~~~~~~~~~~~~~~~~~~~~~~~
Solve for 100 iterations.

.. GENERATED FROM PYTHON SOURCE LINES 434-437

.. code-block:: default


    solver.tui.solve.iterate(100)








.. GENERATED FROM PYTHON SOURCE LINES 438-441

.. image:: /_static/mixing_elbow_012.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 443-446

.. image:: /_static/mixing_elbow_013.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 448-451

Save data file
~~~~~~~~~~~~~~
Save the data file (``mixing_elbow1.dat.h5``).

.. GENERATED FROM PYTHON SOURCE LINES 451-454

.. code-block:: default


    solver.tui.file.write_data("mixing_elbow1.dat.h5")








.. GENERATED FROM PYTHON SOURCE LINES 455-464

Create definition for velocity magnitude contours
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create and display a definition for the velocity magnitude contours on the
symmetry plane.

- Set ``"contour"`` to ``"contour-vel"``.
- Set ``"field"`` to ``"velocity-magnitude"``.
- Set ``"surfaces-list"`` to ``"symmetry-xyplane"``.
- Set ``"display"`` to ``"contour-vel contour"``.

.. GENERATED FROM PYTHON SOURCE LINES 464-482

.. code-block:: default


    solver.tui.display.objects.create(
        "contour",
        "contour-vel",
        "filled?",
        "yes",
        "node-values?",
        "yes",
        "field",
        "velocity-magnitude",
        "surfaces-list",
        "symmetry-xyplane",
        "()",
        "coloring",
        "banded",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 483-486

.. image:: /_static/mixing_elbow_014.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 488-497

Create definition for temperature contours
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create and display a definition for temperature contours on the symmetry
plane.

- Set ``"contour"`` to ``"contour-temp"``.
- Set ``"field"`` to ``"temperature"``.
- Set ``"surfaces-list"`` to ``"symmetry-xyplane"``.
- Set ``"display"`` to ``"contour-temp contour"``.

.. GENERATED FROM PYTHON SOURCE LINES 497-515

.. code-block:: default


    solver.tui.display.objects.create(
        "contour",
        "contour-temp",
        "filled?",
        "yes",
        "node-values?",
        "yes",
        "field",
        "temperature",
        "surfaces-list",
        "symmetry-xyplane",
        "()",
        "coloring",
        "smooth",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 516-519

.. image:: /_static/mixing_elbow_015.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 521-530

Create velocity vectors
~~~~~~~~~~~~~~~~~~~~~~~
Create and display velocity vectors on the symmetry-xyplane plane.

- Set ``"vector"`` to ``"vector-vel"``.
- Set ``"style"`` to ``"arrow"``.
- Set ``"surface-list"`` to ``"symmetry-xyplane"``.
- Set ``"scale"`` to ``"4"``.
- Set ``"skip"`` to ``"2"``.

.. GENERATED FROM PYTHON SOURCE LINES 530-548

.. code-block:: default


    solver.tui.display.objects.create(
        "vector",
        "vector-vel",
        "style",
        "arrow",
        "surface-list",
        "symmetry-xyplane",
        "()",
        "scale",
        "scale-f",
        "4",
        "quit",
        "skip",
        "2",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 549-552

.. image:: /_static/mixing_elbow_016.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 554-558

Create iso-surface
~~~~~~~~~~~~~~~~~~
Create an iso-surface representing the intersection of the plane z=0 and the
surface outlet. Name it ``"z=0_outlet"``.

.. GENERATED FROM PYTHON SOURCE LINES 558-563

.. code-block:: default


    solver.tui.surface.iso_surface(
        "z-coordinate", "z=0_outlet", "outlet", "()", "()", "0", "()"
    )








.. GENERATED FROM PYTHON SOURCE LINES 564-568

Display and save XY plot
~~~~~~~~~~~~~~~~~~~~~~~~~
Display and save an XY plot of the temperature profile across the centerline
of the outlet for the initial solution.

.. GENERATED FROM PYTHON SOURCE LINES 568-580

.. code-block:: default


    solver.tui.display.objects.create(
        "xy",
        "xy-outlet-temp",
        "y-axis-function",
        "temperature",
        "surfaces-list",
        "z=0_outlet",
        "()",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 581-584

.. image:: /_static/mixing_elbow_017.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 586-589

Write final case file and data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Write the final case file and the data.

.. GENERATED FROM PYTHON SOURCE LINES 589-592

.. code-block:: default


    solver.tui.file.write_case_data("mixing_elbow2_tui.cas.h5")








.. GENERATED FROM PYTHON SOURCE LINES 593-596

Close Fluent
~~~~~~~~~~~~
Close Fluent.

.. GENERATED FROM PYTHON SOURCE LINES 596-599

.. code-block:: default


    solver.exit()









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.677 seconds)


.. _sphx_glr_download_examples_00-fluent_mixing_elbow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: mixing_elbow.py <mixing_elbow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: mixing_elbow.ipynb <mixing_elbow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
