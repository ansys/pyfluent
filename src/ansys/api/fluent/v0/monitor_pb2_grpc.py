# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ansys.api.fluent.v0.monitor_pb2 as monitor__pb2


class MonitorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMonitors = channel.unary_unary(
                '/grpcRemoting.Monitor/GetMonitors',
                request_serializer=monitor__pb2.GetMonitorsRequest.SerializeToString,
                response_deserializer=monitor__pb2.GetMonitorsResponse.FromString,
                )
        self.BeginStreaming = channel.unary_stream(
                '/grpcRemoting.Monitor/BeginStreaming',
                request_serializer=monitor__pb2.StreamingRequest.SerializeToString,
                response_deserializer=monitor__pb2.StreamingResponse.FromString,
                )


class MonitorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMonitors(self, request, context):
        """Get monitors info i.e. monitor name, montitor properties e.g. lable, title etc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginStreaming(self, request, context):
        """Begin monitor streaming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMonitors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMonitors,
                    request_deserializer=monitor__pb2.GetMonitorsRequest.FromString,
                    response_serializer=monitor__pb2.GetMonitorsResponse.SerializeToString,
            ),
            'BeginStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.BeginStreaming,
                    request_deserializer=monitor__pb2.StreamingRequest.FromString,
                    response_serializer=monitor__pb2.StreamingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcRemoting.Monitor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Monitor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMonitors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcRemoting.Monitor/GetMonitors',
            monitor__pb2.GetMonitorsRequest.SerializeToString,
            monitor__pb2.GetMonitorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeginStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpcRemoting.Monitor/BeginStreaming',
            monitor__pb2.StreamingRequest.SerializeToString,
            monitor__pb2.StreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
